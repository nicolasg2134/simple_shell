char *ptr = NULL;
char **string = NULL;
int status;
pid_t parent;
(void)argc;

while (1)
{
ptr = NULL;
signal(SIGINT, signal_manipulation);
if (prompt(&ptr) == -1)
	continue;
string = strtoken(ptr);
if (!string)
{
free_string(99, 1, ptr);
continue;
}
free_string(99, 1, ptr);
if (shell_built(string, env))
	continue;
parent = fork();
if (parent == 0)
{
check_path(string, env);
if (execve(string[0], string, NULL) == -1)
{
perror(*argv);
free_array(string);
exit(0);
}
}
else
{
free_array(string);
if (!wait(&status))
	break;
}
}
return (0);
}

/**
 * prompt - prompts the user for commands
 * @ptr: ptr will hold the string of commands
 * Return: 1 for success
 */

int prompt(char **ptr)
{
size_t size = 0;
int len;

if (isatty(STDIN_FILENO))
	write(STDOUT_FILENO, "~$ ", 3);
len = getline(ptr, &size, stdin);
if (len == EOF)
	free_string(-1, 1, *ptr);
(*ptr)[len - 1] = '\0';
if (*(*ptr) == '\0' || (*(*ptr) == '.' && (*ptr)[1] == '\0'))
{
free_string(99, 1, *ptr);
return (-1);
}
else
	return (1);
}char *ptr = NULL;
char **string = NULL;
int status;
pid_t parent;
(void)argc;

while (1)
{
ptr = NULL;
signal(SIGINT, signal_manipulation);
if (prompt(&ptr) == -1)
	continue;
string = strtoken(ptr);
if (!string)
{
free_string(99, 1, ptr);
continue;
}
free_string(99, 1, ptr);
if (shell_built(string, env))
	continue;
parent = fork();
if (parent == 0)
{
check_path(string, env);
if (execve(string[0], string, NULL) == -1)
{
perror(*argv);
free_array(string);
exit(0);
}
}
else
{
free_array(string);
if (!wait(&status))
	break;
}
}
return (0);
}

/**
 * prompt - prompts the user for commands
 * @ptr: